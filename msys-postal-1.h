/*
   This file has been generated by IDA.
   It contains local type definitions from
   the type library 'msys-postal-1'
*/

#define __int8 char
#define __int16 short
#define __int32 int
#define __int64 long long

struct _reent;
struct __sFILE64;
struct __locale_t;
struct per_process_cxx_malloc;
struct std::nothrow_t;
struct san;
struct MTinterface;
struct callback;

/* 1 */
typedef unsigned __int64 size_t;

/* 2 */
typedef unsigned int wint_t;

/* 3 */
typedef char __int8_t;

/* 4 */
typedef unsigned __int16 __uint16_t;

/* 5 */
typedef unsigned int __uint32_t;

/* 6 */
typedef unsigned __int64 __uint64_t;

/* 7 */
typedef __int64 _off64_t;

/* 8 */
typedef __int64 _fpos_t;

/* 9 */
typedef _off64_t _fpos64_t;

/* 10 */
typedef __int64 _ssize_t;

/* 11 */
union $69411BACE686AE668665FE2C3FA24C90
{
  wint_t __wch;
  unsigned __int8 __wchb[4];
};

/* 12 */
struct _mbstate_t
{
  int __count;
  $69411BACE686AE668665FE2C3FA24C90 __value;
};

/* 13 */
typedef unsigned int __ULong;

/* 14 */
typedef void *_LOCK_T;

/* 15 */
typedef _LOCK_T _flock_t;

/* 16 */
struct __declspec(align(8)) _Bigint
{
  _Bigint *_next;
  int _k;
  int _maxwds;
  int _sign;
  int _wds;
  __ULong _x[1];
};

/* 17 */
struct __tm
{
  int __tm_sec;
  int __tm_min;
  int __tm_hour;
  int __tm_mday;
  int __tm_mon;
  int __tm_year;
  int __tm_wday;
  int __tm_yday;
  int __tm_isdst;
};

/* 18 */
struct _on_exit_args
{
  void *_fnargs[32];
  void *_dso_handle[32];
  __ULong _fntypes;
  __ULong _is_cxa;
};

/* 19 */
struct _atexit
{
  _atexit *_next;
  int _ind;
  void (*_fns[32])(void);
  _on_exit_args _on_exit_args;
};

/* 20 */
struct __declspec(align(8)) __sbuf
{
  unsigned __int8 *_base;
  int _size;
};

/* 22 */
typedef __sFILE64 __FILE;

/* 27 */
struct _rand48
{
  unsigned __int16 _seed[3];
  unsigned __int16 _mult[3];
  unsigned __int16 _add;
};

/* 26 */
struct $1F270FF73DBE1F4C0CCB08D4DF340292
{
  unsigned int _unused_rand;
  char *_strtok_last;
  char _asctime_buf[26];
  __tm _localtime_buf;
  int _gamma_signgam;
  unsigned __int64 _rand_next;
  _rand48 _r48;
  _mbstate_t _mblen_state;
  _mbstate_t _mbtowc_state;
  _mbstate_t _wctomb_state;
  char _l64a_buf[8];
  char _signal_buf[24];
  int _getdate_err;
  _mbstate_t _mbrlen_state;
  _mbstate_t _mbrtowc_state;
  _mbstate_t _mbsrtowcs_state;
  _mbstate_t _wcrtomb_state;
  _mbstate_t _wcsrtombs_state;
  int _h_errno;
};

/* 28 */
struct $96943D833C94E9272B7BA75406C557F3
{
  unsigned __int8 *_nextf[30];
  unsigned int _nmalloc[30];
};

/* 25 */
union $9400FB5367ABAAC1652E821498432933
{
  $1F270FF73DBE1F4C0CCB08D4DF340292 _reent;
  $96943D833C94E9272B7BA75406C557F3 _unused;
};

/* 29 */
struct _glue
{
  _glue *_next;
  int _niobs;
  __FILE *_iobs;
};

/* 23 */
struct __sFILE64
{
  unsigned __int8 *_p;
  int _r;
  int _w;
  __int16 _flags;
  __int16 _file;
  __sbuf _bf;
  int _lbfsize;
  _reent *_data;
  void *_cookie;
  _ssize_t (*_read)(_reent *, void *, char *, size_t);
  _ssize_t (*_write)(_reent *, void *, const char *, size_t);
  _fpos_t (*_seek)(_reent *, void *, _fpos_t, int);
  int (*_close)(_reent *, void *);
  __sbuf _ub;
  unsigned __int8 *_up;
  int _ur;
  unsigned __int8 _ubuf[3];
  unsigned __int8 _nbuf[1];
  __sbuf _lb;
  int _blksize;
  int _flags2;
  _off64_t _offset;
  _fpos64_t (*_seek64)(_reent *, void *, _fpos64_t, int);
  _flock_t _lock;
  _mbstate_t _mbstate;
};

/* 21 */
struct _reent
{
  int _errno;
  __FILE *_stdin;
  __FILE *_stdout;
  __FILE *_stderr;
  int _inc;
  char _emergency[25];
  int _unspecified_locale_info;
  __locale_t *_locale;
  int __sdidinit;
  void (*__cleanup)(_reent *);
  _Bigint *_result;
  int _result_k;
  _Bigint *_p5s;
  _Bigint **_freelist;
  int _cvtlen;
  char *_cvtbuf;
  $9400FB5367ABAAC1652E821498432933 _new;
  _atexit *_atexit;
  _atexit _atexit0;
  void (**_sig_func)(int);
  _glue __sglue;
  __FILE __sf[3];
};

/* 308 */
typedef unsigned __int16 wchar_t;

/* 353 */
typedef _mbstate_t mbstate_t;

/* 336 */
struct __declspec(align(4)) lconv
{
  char *decimal_point;
  char *thousands_sep;
  char *grouping;
  char *int_curr_symbol;
  char *currency_symbol;
  char *mon_decimal_point;
  char *mon_thousands_sep;
  char *mon_grouping;
  char *positive_sign;
  char *negative_sign;
  char int_frac_digits;
  char frac_digits;
  char p_cs_precedes;
  char p_sep_by_space;
  char n_cs_precedes;
  char n_sep_by_space;
  char p_sign_posn;
  char n_sign_posn;
  char int_n_cs_precedes;
  char int_n_sep_by_space;
  char int_n_sign_posn;
  char int_p_cs_precedes;
  char int_p_sep_by_space;
  char int_p_sign_posn;
};

/* 354 */
struct __lc_cats
{
  const void *ptr;
  char *buf;
};

/* 24 */
struct __locale_t
{
  char categories[7][32];
  int (*wctomb)(_reent *, char *, wchar_t, mbstate_t *);
  int (*mbtowc)(_reent *, wchar_t *, const char *, size_t, mbstate_t *);
  int cjk_lang;
  char *ctype_ptr;
  lconv lconv;
  __lc_cats lc_cat[7];
};

/* 30 */
typedef __int8_t int8_t;

/* 31 */
typedef __uint16_t uint16_t;

/* 32 */
typedef __uint32_t uint32_t;

/* 33 */
typedef __uint64_t uint64_t;

/* 35 */
typedef _BOOL1 _Bool;

/* 34 */
struct __declspec(align(8)) libpostal_normalize_options
{
  char **languages;
  size_t num_languages;
  uint16_t address_components;
  _Bool latin_ascii;
  _Bool transliterate;
  _Bool strip_accents;
  _Bool decompose;
  _Bool lowercase;
  _Bool trim_string;
  _Bool drop_parentheticals;
  _Bool replace_numeric_hyphens;
  _Bool delete_numeric_hyphens;
  _Bool split_alpha_from_numeric;
  _Bool replace_word_hyphens;
  _Bool delete_word_hyphens;
  _Bool delete_final_periods;
  _Bool delete_acronym_periods;
  _Bool drop_english_possessives;
  _Bool delete_apostrophes;
  _Bool expand_numex;
  _Bool roman_numerals;
};

/* 36 */
typedef libpostal_normalize_options libpostal_normalize_options_t;

/* 37 */
struct libpostal_address_parser_response
{
  size_t num_components;
  char **components;
  char **labels;
};

/* 38 */
typedef libpostal_address_parser_response libpostal_address_parser_response_t;

/* 39 */
struct libpostal_address_parser_options
{
  char *language;
  char *country;
};

/* 40 */
typedef libpostal_address_parser_options libpostal_address_parser_options_t;

/* 41 */
struct libpostal_language_classifier_response
{
  size_t num_languages;
  char **languages;
  double *probs;
};

/* 42 */
typedef libpostal_language_classifier_response libpostal_language_classifier_response_t;

/* 43 */
struct __declspec(align(2)) libpostal_near_dupe_hash_options
{
  _Bool with_name;
  _Bool with_address;
  _Bool with_unit;
  _Bool with_city_or_equivalent;
  _Bool with_small_containing_boundaries;
  _Bool with_postal_code;
  _Bool with_latlon;
  double latitude;
  double longitude;
  uint32_t geohash_precision;
  _Bool name_and_address_keys;
  _Bool name_only_keys;
  _Bool address_only_keys;
};

/* 44 */
typedef libpostal_near_dupe_hash_options libpostal_near_dupe_hash_options_t;

/* 45 */
enum libpostal_duplicate_status_t : __int32
{
  LIBPOSTAL_NULL_DUPLICATE_STATUS = 0xFFFFFFFF,
  LIBPOSTAL_NON_DUPLICATE = 0x0,
  LIBPOSTAL_POSSIBLE_DUPLICATE_NEEDS_REVIEW = 0x3,
  LIBPOSTAL_LIKELY_DUPLICATE = 0x6,
  LIBPOSTAL_EXACT_DUPLICATE = 0x9,
};

/* 46 */
struct libpostal_duplicate_options
{
  size_t num_languages;
  char **languages;
};

/* 47 */
typedef libpostal_duplicate_options libpostal_duplicate_options_t;

/* 48 */
struct libpostal_fuzzy_duplicate_options
{
  size_t num_languages;
  char **languages;
  double needs_review_threshold;
  double likely_dupe_threshold;
};

/* 49 */
typedef libpostal_fuzzy_duplicate_options libpostal_fuzzy_duplicate_options_t;

/* 50 */
struct libpostal_fuzzy_duplicate_status
{
  libpostal_duplicate_status_t status;
  double similarity;
};

/* 51 */
typedef libpostal_fuzzy_duplicate_status libpostal_fuzzy_duplicate_status_t;

/* 52 */
struct __declspec(align(8)) libpostal_token
{
  size_t offset;
  size_t len;
  uint16_t type;
};

/* 53 */
typedef libpostal_token libpostal_token_t;

/* 54 */
struct libpostal_normalized_token
{
  char *str;
  libpostal_token_t token;
};

/* 55 */
typedef libpostal_normalized_token libpostal_normalized_token_t;

/* 56 */
struct uint32_array
{
  size_t n;
  size_t m;
  uint32_t *a;
};

/* 57 */
struct char_array
{
  size_t n;
  size_t m;
  char *a;
};

/* 58 */
typedef int8_t utf8proc_int8_t;

/* 59 */
struct cstring_array
{
  uint32_array *indices;
  char_array *str;
};

/* 60 */
typedef libpostal_token_t token_t;

/* 61 */
struct token_array
{
  size_t n;
  size_t m;
  token_t *a;
};

/* 62 */
struct language_classifier_response
{
  size_t num_languages;
  char **languages;
  double *probs;
};

/* 63 */
typedef language_classifier_response language_classifier_response_t;

/* 64 */
typedef int __int32_t;

/* 65 */
typedef __int32_t int32_t;

/* 66 */
typedef _ssize_t ssize_t;

/* 67 */
enum $7AAC5E902AE559564AA91ADD5B3D9169 : __int32
{
  LIBPOSTAL_TOKEN_TYPE_END = 0x0,
  LIBPOSTAL_TOKEN_TYPE_WORD = 0x1,
  LIBPOSTAL_TOKEN_TYPE_ABBREVIATION = 0x2,
  LIBPOSTAL_TOKEN_TYPE_IDEOGRAPHIC_CHAR = 0x3,
  LIBPOSTAL_TOKEN_TYPE_HANGUL_SYLLABLE = 0x4,
  LIBPOSTAL_TOKEN_TYPE_ACRONYM = 0x5,
  LIBPOSTAL_TOKEN_TYPE_PHRASE = 0xA,
  LIBPOSTAL_TOKEN_TYPE_EMAIL = 0x14,
  LIBPOSTAL_TOKEN_TYPE_URL = 0x15,
  LIBPOSTAL_TOKEN_TYPE_US_PHONE = 0x16,
  LIBPOSTAL_TOKEN_TYPE_INTL_PHONE = 0x17,
  LIBPOSTAL_TOKEN_TYPE_NUMERIC = 0x32,
  LIBPOSTAL_TOKEN_TYPE_ORDINAL = 0x33,
  LIBPOSTAL_TOKEN_TYPE_ROMAN_NUMERAL = 0x34,
  LIBPOSTAL_TOKEN_TYPE_IDEOGRAPHIC_NUMBER = 0x35,
  LIBPOSTAL_TOKEN_TYPE_PERIOD = 0x64,
  LIBPOSTAL_TOKEN_TYPE_EXCLAMATION = 0x65,
  LIBPOSTAL_TOKEN_TYPE_QUESTION_MARK = 0x66,
  LIBPOSTAL_TOKEN_TYPE_COMMA = 0x67,
  LIBPOSTAL_TOKEN_TYPE_COLON = 0x68,
  LIBPOSTAL_TOKEN_TYPE_SEMICOLON = 0x69,
  LIBPOSTAL_TOKEN_TYPE_PLUS = 0x6A,
  LIBPOSTAL_TOKEN_TYPE_AMPERSAND = 0x6B,
  LIBPOSTAL_TOKEN_TYPE_AT_SIGN = 0x6C,
  LIBPOSTAL_TOKEN_TYPE_POUND = 0x6D,
  LIBPOSTAL_TOKEN_TYPE_ELLIPSIS = 0x6E,
  LIBPOSTAL_TOKEN_TYPE_DASH = 0x6F,
  LIBPOSTAL_TOKEN_TYPE_BREAKING_DASH = 0x70,
  LIBPOSTAL_TOKEN_TYPE_HYPHEN = 0x71,
  LIBPOSTAL_TOKEN_TYPE_PUNCT_OPEN = 0x72,
  LIBPOSTAL_TOKEN_TYPE_PUNCT_CLOSE = 0x73,
  LIBPOSTAL_TOKEN_TYPE_DOUBLE_QUOTE = 0x77,
  LIBPOSTAL_TOKEN_TYPE_SINGLE_QUOTE = 0x78,
  LIBPOSTAL_TOKEN_TYPE_OPEN_QUOTE = 0x79,
  LIBPOSTAL_TOKEN_TYPE_CLOSE_QUOTE = 0x7A,
  LIBPOSTAL_TOKEN_TYPE_SLASH = 0x7C,
  LIBPOSTAL_TOKEN_TYPE_BACKSLASH = 0x7D,
  LIBPOSTAL_TOKEN_TYPE_GREATER_THAN = 0x7E,
  LIBPOSTAL_TOKEN_TYPE_LESS_THAN = 0x7F,
  LIBPOSTAL_TOKEN_TYPE_OTHER = 0xC8,
  LIBPOSTAL_TOKEN_TYPE_WHITESPACE = 0x12C,
  LIBPOSTAL_TOKEN_TYPE_NEWLINE = 0x12D,
  LIBPOSTAL_TOKEN_TYPE_INVALID_CHAR = 0x1F4,
};

/* 68 */
enum dictionary_type : __int32
{
  DICTIONARY_ANY = 0x1,
  DICTIONARY_SYNONYM = 0x2,
  DICTIONARY_STOPWORD = 0x3,
  DICTIONARY_ELISION = 0x4,
  DICTIONARY_AMBIGUOUS_EXPANSION = 0x5,
  DICTIONARY_STREET_NAME = 0xA,
  DICTIONARY_STREET_TYPE = 0xB,
  DICTIONARY_CONCATENATED_PREFIX_SEPARABLE = 0xC,
  DICTIONARY_CONCATENATED_SUFFIX_SEPARABLE = 0xD,
  DICTIONARY_CONCATENATED_SUFFIX_INSEPARABLE = 0xE,
  DICTIONARY_DIRECTIONAL = 0xF,
  DICTIONARY_QUALIFIER = 0x10,
  DICTIONARY_BUILDING_TYPE = 0x11,
  DICTIONARY_LEVEL_NUMBERED = 0x12,
  DICTIONARY_LEVEL_STANDALONE = 0x13,
  DICTIONARY_LEVEL_MEZZANINE = 0x14,
  DICTIONARY_LEVEL_BASEMENT = 0x15,
  DICTIONARY_LEVEL_SUB_BASEMENT = 0x16,
  DICTIONARY_UNIT_NUMBERED = 0x17,
  DICTIONARY_UNIT_STANDALONE = 0x18,
  DICTIONARY_UNIT_DIRECTION = 0x19,
  DICTIONARY_ENTRANCE = 0x1A,
  DICTIONARY_STAIRCASE = 0x1B,
  DICTIONARY_NUMBER = 0x1E,
  DICTIONARY_NO_NUMBER = 0x1F,
  DICTIONARY_HOUSE_NUMBER = 0x20,
  DICTIONARY_POST_OFFICE = 0x21,
  DICTIONARY_POSTCODE = 0x22,
  DICTIONARY_PLACE_NAME = 0x32,
  DICTIONARY_COMPANY_TYPE = 0x33,
  DICTIONARY_GIVEN_NAME = 0x34,
  DICTIONARY_SURNAME = 0x35,
  DICTIONARY_PERSONAL_TITLE = 0x36,
  DICTIONARY_PERSONAL_SUFFIX = 0x37,
  DICTIONARY_ACADEMIC_DEGREE = 0x38,
  DICTIONARY_NAMED_PERSON = 0x3C,
  DICTIONARY_NAMED_ORGANIZATION = 0x3D,
  DICTIONARY_CATEGORY = 0x46,
  DICTIONARY_CHAIN = 0x47,
  DICTIONARY_NEAR = 0x48,
  DICTIONARY_CROSS_STREET = 0x50,
  DICTIONARY_NULL = 0x5A,
  DICTIONARY_TOPONYM = 0x64,
  DICTIONARY_POSTAL_CODE = 0x65,
};

/* 69 */
typedef unsigned int khint32_t;

/* 70 */
typedef khint32_t khint_t;

/* 71 */
typedef khint_t khiter_t;

/* 72 */
typedef const char *kh_cstr_t;

/* 73 */
struct __declspec(align(8)) ks_isort_stack_t
{
  void *left;
  void *right;
  int depth;
};

/* 74 */
struct kh_str_set_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  kh_cstr_t *keys;
  char *vals;
};

/* 75 */
struct string_tree
{
  uint32_array *token_indices;
  cstring_array *strings;
};

/* 76 */
typedef string_tree string_tree_t;

/* 77 */
struct string_tree_iterator
{
  string_tree_t *tree;
  uint32_t *path;
  uint32_t num_tokens;
  uint32_t remaining;
};

/* 78 */
typedef string_tree_iterator string_tree_iterator_t;

/* 79 */
struct phrase
{
  uint32_t start;
  uint32_t len;
  uint32_t data;
};

/* 80 */
typedef phrase phrase_t;

/* 81 */
struct phrase_array
{
  size_t n;
  size_t m;
  phrase_t *a;
};

/* 82 */
struct __declspec(align(4)) address_expansion
{
  int32_t canonical_index;
  char language[4];
  uint32_t num_dictionaries;
  uint16_t dictionary_ids[5];
  uint32_t address_components;
  _Bool separable;
};

/* 83 */
typedef address_expansion address_expansion_t;

/* 84 */
struct address_expansion_array
{
  size_t n;
  size_t m;
  address_expansion_t *a;
};

/* 85 */
struct address_expansion_value
{
  uint32_t components;
  address_expansion_array *expansions;
};

/* 86 */
typedef address_expansion_value address_expansion_value_t;

/* 87 */
struct __declspec(align(8)) phrase_language
{
  char *language;
  phrase_t phrase;
};

/* 88 */
typedef phrase_language phrase_language_t;

/* 89 */
struct phrase_language_array
{
  size_t n;
  size_t m;
  phrase_language_t *a;
};

/* 90 */
enum expansion_phrase_option_t : __int32
{
  EXPAND_PHRASES = 0x0,
  KEEP_PHRASES = 0x1,
  DELETE_PHRASES = 0x2,
};

/* 91 */
enum gazetteer_match_type_t : __int32
{
  GAZETTEER_MATCH_IGNORABLE = 0x0,
  GAZETTEER_MATCH_EDGE_IGNORABLE = 0x1,
  GAZETTEER_MATCH_POSSIBLE_ROOT = 0x2,
  GAZETTEER_MATCH_SPECIFIER = 0x3,
  GAZETTEER_MATCH_VALID_COMPONENTS = 0x4,
};

/* 92 */
typedef unsigned __int8 __uint8_t;

/* 93 */
typedef __uint8_t uint8_t;

/* 94 */
typedef char *__gnuc_va_list;

/* 95 */
typedef __gnuc_va_list va_list;

/* 96 */
typedef __FILE FILE;

/* 97 */
typedef dictionary_type dictionary_type_t;

/* 98 */
struct uchar_array
{
  size_t n;
  size_t m;
  unsigned __int8 *a;
};

/* 99 */
struct trie_node
{
  int32_t base;
  int32_t check;
};

/* 100 */
typedef trie_node trie_node_t;

/* 101 */
struct trie_data_node
{
  uint32_t tail;
  uint32_t data;
};

/* 102 */
typedef trie_data_node trie_data_node_t;

/* 103 */
struct trie_node_array
{
  size_t n;
  size_t m;
  trie_node_t *a;
};

/* 104 */
struct trie_data_array
{
  size_t n;
  size_t m;
  trie_data_node_t *a;
};

/* 105 */
struct trie
{
  trie_node_t null_node;
  trie_node_array *nodes;
  trie_data_array *data;
  uchar_array *tail;
  char *alphabet;
  uint8_t alpha_map[256];
  uint32_t alphabet_size;
  uint32_t num_keys;
};

/* 106 */
typedef trie trie_t;

/* 107 */
struct trie_prefix_result
{
  uint32_t node_id;
  size_t tail_pos;
};

/* 108 */
typedef trie_prefix_result trie_prefix_result_t;

/* 109 */
struct address_expansion_value_array
{
  size_t n;
  size_t m;
  address_expansion_value_t **a;
};

/* 110 */
struct address_dictionary
{
  cstring_array *canonical;
  address_expansion_value_array *values;
  trie_t *trie;
};

/* 111 */
typedef address_dictionary address_dictionary_t;

/* 112 */
enum $10C977F8257ADAC8C2FAF908055C1B79 : __int32
{
  UTF8PROC_NULLTERM = 0x1,
  UTF8PROC_STABLE = 0x2,
  UTF8PROC_COMPAT = 0x4,
  UTF8PROC_COMPOSE = 0x8,
  UTF8PROC_DECOMPOSE = 0x10,
  UTF8PROC_IGNORE = 0x20,
  UTF8PROC_REJECTNA = 0x40,
  UTF8PROC_NLF2LS = 0x80,
  UTF8PROC_NLF2PS = 0x100,
  UTF8PROC_NLF2LF = 0x180,
  UTF8PROC_STRIPCC = 0x200,
  UTF8PROC_CASEFOLD = 0x400,
  UTF8PROC_CHARBOUND = 0x800,
  UTF8PROC_LUMP = 0x1000,
  UTF8PROC_STRIPMARK = 0x2000,
};

/* 113 */
enum script_t : __int32
{
  SCRIPT_UNKNOWN = 0x0,
  SCRIPT_COMMON = 0x1,
  SCRIPT_LATIN = 0x2,
  SCRIPT_BOPOMOFO = 0x3,
  SCRIPT_INHERITED = 0x4,
  SCRIPT_GREEK = 0x5,
  SCRIPT_COPTIC = 0x6,
  SCRIPT_CYRILLIC = 0x7,
  SCRIPT_ARMENIAN = 0x8,
  SCRIPT_HEBREW = 0x9,
  SCRIPT_ARABIC = 0xA,
  SCRIPT_SYRIAC = 0xB,
  SCRIPT_THAANA = 0xC,
  SCRIPT_NKO = 0xD,
  SCRIPT_SAMARITAN = 0xE,
  SCRIPT_MANDAIC = 0xF,
  SCRIPT_DEVANAGARI = 0x10,
  SCRIPT_BENGALI = 0x11,
  SCRIPT_GURMUKHI = 0x12,
  SCRIPT_GUJARATI = 0x13,
  SCRIPT_ORIYA = 0x14,
  SCRIPT_TAMIL = 0x15,
  SCRIPT_TELUGU = 0x16,
  SCRIPT_KANNADA = 0x17,
  SCRIPT_MALAYALAM = 0x18,
  SCRIPT_SINHALA = 0x19,
  SCRIPT_THAI = 0x1A,
  SCRIPT_LAO = 0x1B,
  SCRIPT_TIBETAN = 0x1C,
  SCRIPT_MYANMAR = 0x1D,
  SCRIPT_GEORGIAN = 0x1E,
  SCRIPT_HANGUL = 0x1F,
  SCRIPT_ETHIOPIC = 0x20,
  SCRIPT_CHEROKEE = 0x21,
  SCRIPT_CANADIAN_ABORIGINAL = 0x22,
  SCRIPT_OGHAM = 0x23,
  SCRIPT_RUNIC = 0x24,
  SCRIPT_TAGALOG = 0x25,
  SCRIPT_HANUNOO = 0x26,
  SCRIPT_BUHID = 0x27,
  SCRIPT_TAGBANWA = 0x28,
  SCRIPT_KHMER = 0x29,
  SCRIPT_MONGOLIAN = 0x2A,
  SCRIPT_LIMBU = 0x2B,
  SCRIPT_TAI_LE = 0x2C,
  SCRIPT_NEW_TAI_LUE = 0x2D,
  SCRIPT_BUGINESE = 0x2E,
  SCRIPT_TAI_THAM = 0x2F,
  SCRIPT_BALINESE = 0x30,
  SCRIPT_SUNDANESE = 0x31,
  SCRIPT_BATAK = 0x32,
  SCRIPT_LEPCHA = 0x33,
  SCRIPT_OL_CHIKI = 0x34,
  SCRIPT_BRAILLE = 0x35,
  SCRIPT_GLAGOLITIC = 0x36,
  SCRIPT_TIFINAGH = 0x37,
  SCRIPT_HAN = 0x38,
  SCRIPT_HIRAGANA = 0x39,
  SCRIPT_KATAKANA = 0x3A,
  SCRIPT_YI = 0x3B,
  SCRIPT_LISU = 0x3C,
  SCRIPT_VAI = 0x3D,
  SCRIPT_BAMUM = 0x3E,
  SCRIPT_SYLOTI_NAGRI = 0x3F,
  SCRIPT_PHAGS_PA = 0x40,
  SCRIPT_SAURASHTRA = 0x41,
  SCRIPT_KAYAH_LI = 0x42,
  SCRIPT_REJANG = 0x43,
  SCRIPT_JAVANESE = 0x44,
  SCRIPT_CHAM = 0x45,
  SCRIPT_TAI_VIET = 0x46,
  SCRIPT_MEETEI_MAYEK = 0x47,
  SCRIPT_LINEAR_B = 0x48,
  SCRIPT_LYCIAN = 0x49,
  SCRIPT_CARIAN = 0x4A,
  SCRIPT_OLD_ITALIC = 0x4B,
  SCRIPT_GOTHIC = 0x4C,
  SCRIPT_OLD_PERMIC = 0x4D,
  SCRIPT_UGARITIC = 0x4E,
  SCRIPT_OLD_PERSIAN = 0x4F,
  SCRIPT_DESERET = 0x50,
  SCRIPT_SHAVIAN = 0x51,
  SCRIPT_OSMANYA = 0x52,
  SCRIPT_ELBASAN = 0x53,
  SCRIPT_CAUCASIAN_ALBANIAN = 0x54,
  SCRIPT_LINEAR_A = 0x55,
  SCRIPT_CYPRIOT = 0x56,
  SCRIPT_IMPERIAL_ARAMAIC = 0x57,
  SCRIPT_PALMYRENE = 0x58,
  SCRIPT_NABATAEAN = 0x59,
  SCRIPT_HATRAN = 0x5A,
  SCRIPT_PHOENICIAN = 0x5B,
  SCRIPT_LYDIAN = 0x5C,
  SCRIPT_MEROITIC_HIEROGLYPHS = 0x5D,
  SCRIPT_MEROITIC_CURSIVE = 0x5E,
  SCRIPT_KHAROSHTHI = 0x5F,
  SCRIPT_OLD_SOUTH_ARABIAN = 0x60,
  SCRIPT_OLD_NORTH_ARABIAN = 0x61,
  SCRIPT_MANICHAEAN = 0x62,
  SCRIPT_AVESTAN = 0x63,
  SCRIPT_INSCRIPTIONAL_PARTHIAN = 0x64,
  SCRIPT_INSCRIPTIONAL_PAHLAVI = 0x65,
  SCRIPT_PSALTER_PAHLAVI = 0x66,
  SCRIPT_OLD_TURKIC = 0x67,
  SCRIPT_OLD_HUNGARIAN = 0x68,
  SCRIPT_BRAHMI = 0x69,
  SCRIPT_KAITHI = 0x6A,
  SCRIPT_SORA_SOMPENG = 0x6B,
  SCRIPT_CHAKMA = 0x6C,
  SCRIPT_MAHAJANI = 0x6D,
  SCRIPT_SHARADA = 0x6E,
  SCRIPT_KHOJKI = 0x6F,
  SCRIPT_MULTANI = 0x70,
  SCRIPT_KHUDAWADI = 0x71,
  SCRIPT_GRANTHA = 0x72,
  SCRIPT_TIRHUTA = 0x73,
  SCRIPT_SIDDHAM = 0x74,
  SCRIPT_MODI = 0x75,
  SCRIPT_TAKRI = 0x76,
  SCRIPT_AHOM = 0x77,
  SCRIPT_WARANG_CITI = 0x78,
  SCRIPT_PAU_CIN_HAU = 0x79,
  SCRIPT_CUNEIFORM = 0x7A,
  SCRIPT_EGYPTIAN_HIEROGLYPHS = 0x7B,
  SCRIPT_ANATOLIAN_HIEROGLYPHS = 0x7C,
  SCRIPT_MRO = 0x7D,
  SCRIPT_BASSA_VAH = 0x7E,
  SCRIPT_PAHAWH_HMONG = 0x7F,
  SCRIPT_MIAO = 0x80,
  SCRIPT_DUPLOYAN = 0x81,
  SCRIPT_SIGNWRITING = 0x82,
  SCRIPT_MENDE_KIKAKUI = 0x83,
  NUM_SCRIPTS = 0x84,
};

/* 114 */
struct script_language
{
  script_t script;
  char language[4];
};

/* 115 */
typedef script_language script_language_t;

/* 116 */
enum step_type_t : __int32
{
  STEP_RULESET = 0x0,
  STEP_TRANSFORM = 0x1,
  STEP_UNICODE_NORMALIZATION = 0x2,
};

/* 117 */
struct transliteration_step
{
  step_type_t type;
  char *name;
};

/* 118 */
typedef transliteration_step transliteration_step_t;

/* 119 */
struct step_array
{
  size_t n;
  size_t m;
  transliteration_step_t **a;
};

/* 120 */
struct transliterator
{
  char *name;
  uint8_t internal;
  uint32_t steps_index;
  size_t steps_length;
};

/* 121 */
typedef transliterator transliterator_t;

/* 122 */
struct group_capture
{
  size_t start;
  size_t len;
};

/* 123 */
typedef group_capture group_capture_t;

/* 124 */
struct group_capture_array
{
  size_t n;
  size_t m;
  group_capture_t *a;
};

/* 125 */
struct transliteration_replacement
{
  uint32_t string_index;
  uint32_t revisit_index;
  size_t num_groups;
  group_capture_array *groups;
};

/* 126 */
typedef transliteration_replacement transliteration_replacement_t;

/* 127 */
struct transliteration_replacement_array
{
  size_t n;
  size_t m;
  transliteration_replacement_t **a;
};

/* 128 */
struct kh_str_transliterator_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  kh_cstr_t *keys;
  transliterator_t **vals;
};

/* 129 */
struct transliterator_index
{
  size_t transliterator_index;
  size_t num_transliterators;
};

/* 130 */
typedef transliterator_index transliterator_index_t;

/* 131 */
struct kh_script_language_index_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  script_language_t *keys;
  transliterator_index_t *vals;
};

/* 132 */
struct transliteration_table
{
  kh_str_transliterator_t *transliterators;
  kh_script_language_index_t *script_languages;
  cstring_array *transliterator_names;
  step_array *steps;
  trie_t *trie;
  transliteration_replacement_array *replacements;
  cstring_array *replacement_strings;
  cstring_array *revisit_strings;
};

/* 133 */
typedef transliteration_table transliteration_table_t;

/* 134 */
enum transliteration_state_type_t : __int32
{
  TRANS_STATE_BEGIN = 0x0,
  TRANS_STATE_PARTIAL_MATCH = 0x1,
  TRANS_STATE_MATCH = 0x2,
};

/* 135 */
struct __declspec(align(8)) transliteration_state_t
{
  trie_prefix_result_t result;
  transliteration_state_type_t state;
  ssize_t phrase_start;
  size_t phrase_len;
  size_t char_len;
  unsigned __int8 advance_index : 1;
  unsigned __int8 advance_state : 1;
  unsigned __int8 in_set : 1;
  unsigned __int8 empty_transition : 1;
  unsigned __int8 repeat : 1;
  unsigned __int8 word_boundary : 1;
};

/* 136 */
enum char_set_type : __int32
{
  NO_CHAR_RESULT = 0x0,
  SINGLE_CHAR_ONLY = 0x1,
  SINGLE_CHAR_REPEAT = 0x2,
  OPEN_CHAR_SET = 0x3,
  CLOSED_CHAR_SET = 0x4,
  CHAR_SET_REPEAT = 0x5,
  SINGLE_EMPTY_TRANSITION = 0x6,
  CHAR_SET_EMPTY_TRANSITION = 0x7,
};

/* 137 */
struct __declspec(align(8)) char_set_result
{
  trie_prefix_result_t result;
  char_set_type type;
};

/* 138 */
typedef char_set_result char_set_result_t;

/* 139 */
struct tokenized_string
{
  char *str;
  cstring_array *strings;
  token_array *tokens;
};

/* 140 */
typedef tokenized_string tokenized_string_t;

/* 141 */
typedef __int64 __int64_t;

/* 142 */
typedef __int64_t int64_t;

/* 143 */
struct int64_array
{
  size_t n;
  size_t m;
  int64_t *a;
};

/* 144 */
enum trie_search_state_t : __int32
{
  SEARCH_STATE_BEGIN = 0x0,
  SEARCH_STATE_NO_MATCH = 0x1,
  SEARCH_STATE_PARTIAL_MATCH = 0x2,
  SEARCH_STATE_MATCH = 0x3,
};

/* 145 */
typedef const char *ksstr_t;

/* 146 */
struct kh_str_uint32_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  kh_cstr_t *keys;
  uint32_t *vals;
};

/* 147 */
struct string_array
{
  size_t n;
  size_t m;
  char **a;
};

/* 148 */
typedef uint8_t utf8proc_uint8_t;

/* 149 */
typedef int32_t utf8proc_int32_t;

/* 150 */
typedef ssize_t utf8proc_ssize_t;

/* 151 */
enum utf8proc_option_t : __int32
{
  UTF8PROC_NULLTERM_0 = 0x1,
  UTF8PROC_STABLE_0 = 0x2,
  UTF8PROC_COMPAT_0 = 0x4,
  UTF8PROC_COMPOSE_0 = 0x8,
  UTF8PROC_DECOMPOSE_0 = 0x10,
  UTF8PROC_IGNORE_0 = 0x20,
  UTF8PROC_REJECTNA_0 = 0x40,
  UTF8PROC_NLF2LS_0 = 0x80,
  UTF8PROC_NLF2PS_0 = 0x100,
  UTF8PROC_NLF2LF_0 = 0x180,
  UTF8PROC_STRIPCC_0 = 0x200,
  UTF8PROC_CASEFOLD_0 = 0x400,
  UTF8PROC_CHARBOUND_0 = 0x800,
  UTF8PROC_LUMP_0 = 0x1000,
  UTF8PROC_STRIPMARK_0 = 0x2000,
};

/* 152 */
enum $4D59E656915F0C63B2E3BBBD4A4EBDF4 : __int32
{
  UTF8PROC_CATEGORY_CN = 0x0,
  UTF8PROC_CATEGORY_LU = 0x1,
  UTF8PROC_CATEGORY_LL = 0x2,
  UTF8PROC_CATEGORY_LT = 0x3,
  UTF8PROC_CATEGORY_LM = 0x4,
  UTF8PROC_CATEGORY_LO = 0x5,
  UTF8PROC_CATEGORY_MN = 0x6,
  UTF8PROC_CATEGORY_MC = 0x7,
  UTF8PROC_CATEGORY_ME = 0x8,
  UTF8PROC_CATEGORY_ND = 0x9,
  UTF8PROC_CATEGORY_NL = 0xA,
  UTF8PROC_CATEGORY_NO = 0xB,
  UTF8PROC_CATEGORY_PC = 0xC,
  UTF8PROC_CATEGORY_PD = 0xD,
  UTF8PROC_CATEGORY_PS = 0xE,
  UTF8PROC_CATEGORY_PE = 0xF,
  UTF8PROC_CATEGORY_PI = 0x10,
  UTF8PROC_CATEGORY_PF = 0x11,
  UTF8PROC_CATEGORY_PO = 0x12,
  UTF8PROC_CATEGORY_SM = 0x13,
  UTF8PROC_CATEGORY_SC = 0x14,
  UTF8PROC_CATEGORY_SK = 0x15,
  UTF8PROC_CATEGORY_SO = 0x16,
  UTF8PROC_CATEGORY_ZS = 0x17,
  UTF8PROC_CATEGORY_ZL = 0x18,
  UTF8PROC_CATEGORY_ZP = 0x19,
  UTF8PROC_CATEGORY_CC = 0x1A,
  UTF8PROC_CATEGORY_CF = 0x1B,
  UTF8PROC_CATEGORY_CS = 0x1C,
  UTF8PROC_CATEGORY_CO = 0x1D,
};

/* 153 */
enum casing_option : __int32
{
  UTF8_LOWER = 0x0,
  UTF8_UPPER = 0x1,
};

/* 154 */
typedef casing_option casing_option_t;

/* 155 */
typedef __uint64_t __ino_t;

/* 156 */
typedef __ino_t ino_t;

/* 157 */
struct dirent
{
  uint32_t __d_version;
  ino_t d_ino;
  unsigned __int8 d_type;
  unsigned __int8 __d_unused1[3];
  __uint32_t __d_internal1;
  char d_name[256];
};

/* 158 */
union uint64_double_t
{
  uint64_t u;
  double d;
};

/* 159 */
union uint32_float_t
{
  uint32_t u;
  float f;
};

/* 160 */
typedef __int16 __int16_t;

/* 161 */
typedef __int16_t int16_t;

/* 162 */
typedef int16_t utf8proc_int16_t;

/* 163 */
typedef uint16_t utf8proc_uint16_t;

/* 164 */
typedef uint32_t utf8proc_uint32_t;

/* 165 */
typedef _Bool utf8proc_bool;

/* 166 */
typedef utf8proc_int16_t utf8proc_propval_t;

/* 167 */
struct utf8proc_property_struct
{
  utf8proc_propval_t category;
  utf8proc_propval_t combining_class;
  utf8proc_propval_t bidi_class;
  utf8proc_propval_t decomp_type;
  const utf8proc_int32_t *decomp_mapping;
  const utf8proc_int32_t *casefold_mapping;
  utf8proc_int32_t uppercase_mapping;
  utf8proc_int32_t lowercase_mapping;
  utf8proc_int32_t titlecase_mapping;
  utf8proc_int32_t comb1st_index;
  utf8proc_int32_t comb2nd_index;
  unsigned __int32 bidi_mirrored : 1;
  unsigned __int32 comp_exclusion : 1;
  unsigned __int32 ignorable : 1;
  unsigned __int32 control_boundary : 1;
  unsigned __int32 boundclass : 4;
  unsigned __int32 charwidth : 2;
};

/* 168 */
typedef utf8proc_property_struct utf8proc_property_t;

/* 169 */
enum utf8proc_category_t : __int32
{
  UTF8PROC_CATEGORY_CN_0 = 0x0,
  UTF8PROC_CATEGORY_LU_0 = 0x1,
  UTF8PROC_CATEGORY_LL_0 = 0x2,
  UTF8PROC_CATEGORY_LT_0 = 0x3,
  UTF8PROC_CATEGORY_LM_0 = 0x4,
  UTF8PROC_CATEGORY_LO_0 = 0x5,
  UTF8PROC_CATEGORY_MN_0 = 0x6,
  UTF8PROC_CATEGORY_MC_0 = 0x7,
  UTF8PROC_CATEGORY_ME_0 = 0x8,
  UTF8PROC_CATEGORY_ND_0 = 0x9,
  UTF8PROC_CATEGORY_NL_0 = 0xA,
  UTF8PROC_CATEGORY_NO_0 = 0xB,
  UTF8PROC_CATEGORY_PC_0 = 0xC,
  UTF8PROC_CATEGORY_PD_0 = 0xD,
  UTF8PROC_CATEGORY_PS_0 = 0xE,
  UTF8PROC_CATEGORY_PE_0 = 0xF,
  UTF8PROC_CATEGORY_PI_0 = 0x10,
  UTF8PROC_CATEGORY_PF_0 = 0x11,
  UTF8PROC_CATEGORY_PO_0 = 0x12,
  UTF8PROC_CATEGORY_SM_0 = 0x13,
  UTF8PROC_CATEGORY_SC_0 = 0x14,
  UTF8PROC_CATEGORY_SK_0 = 0x15,
  UTF8PROC_CATEGORY_SO_0 = 0x16,
  UTF8PROC_CATEGORY_ZS_0 = 0x17,
  UTF8PROC_CATEGORY_ZL_0 = 0x18,
  UTF8PROC_CATEGORY_ZP_0 = 0x19,
  UTF8PROC_CATEGORY_CC_0 = 0x1A,
  UTF8PROC_CATEGORY_CF_0 = 0x1B,
  UTF8PROC_CATEGORY_CS_0 = 0x1C,
  UTF8PROC_CATEGORY_CO_0 = 0x1D,
};

/* 170 */
enum $A99F2B83BDAC47C650D1B5A8CB094A85 : __int32
{
  UTF8PROC_BIDI_CLASS_L = 0x1,
  UTF8PROC_BIDI_CLASS_LRE = 0x2,
  UTF8PROC_BIDI_CLASS_LRO = 0x3,
  UTF8PROC_BIDI_CLASS_R = 0x4,
  UTF8PROC_BIDI_CLASS_AL = 0x5,
  UTF8PROC_BIDI_CLASS_RLE = 0x6,
  UTF8PROC_BIDI_CLASS_RLO = 0x7,
  UTF8PROC_BIDI_CLASS_PDF = 0x8,
  UTF8PROC_BIDI_CLASS_EN = 0x9,
  UTF8PROC_BIDI_CLASS_ES = 0xA,
  UTF8PROC_BIDI_CLASS_ET = 0xB,
  UTF8PROC_BIDI_CLASS_AN = 0xC,
  UTF8PROC_BIDI_CLASS_CS = 0xD,
  UTF8PROC_BIDI_CLASS_NSM = 0xE,
  UTF8PROC_BIDI_CLASS_BN = 0xF,
  UTF8PROC_BIDI_CLASS_B = 0x10,
  UTF8PROC_BIDI_CLASS_S = 0x11,
  UTF8PROC_BIDI_CLASS_WS = 0x12,
  UTF8PROC_BIDI_CLASS_ON = 0x13,
  UTF8PROC_BIDI_CLASS_LRI = 0x14,
  UTF8PROC_BIDI_CLASS_RLI = 0x15,
  UTF8PROC_BIDI_CLASS_FSI = 0x16,
  UTF8PROC_BIDI_CLASS_PDI = 0x17,
};

/* 171 */
enum $DCFEA92095C78B0B8368EFF52B10B4EE : __int32
{
  UTF8PROC_DECOMP_TYPE_FONT = 0x1,
  UTF8PROC_DECOMP_TYPE_NOBREAK = 0x2,
  UTF8PROC_DECOMP_TYPE_INITIAL = 0x3,
  UTF8PROC_DECOMP_TYPE_MEDIAL = 0x4,
  UTF8PROC_DECOMP_TYPE_FINAL = 0x5,
  UTF8PROC_DECOMP_TYPE_ISOLATED = 0x6,
  UTF8PROC_DECOMP_TYPE_CIRCLE = 0x7,
  UTF8PROC_DECOMP_TYPE_SUPER = 0x8,
  UTF8PROC_DECOMP_TYPE_SUB = 0x9,
  UTF8PROC_DECOMP_TYPE_VERTICAL = 0xA,
  UTF8PROC_DECOMP_TYPE_WIDE = 0xB,
  UTF8PROC_DECOMP_TYPE_NARROW = 0xC,
  UTF8PROC_DECOMP_TYPE_SMALL = 0xD,
  UTF8PROC_DECOMP_TYPE_SQUARE = 0xE,
  UTF8PROC_DECOMP_TYPE_FRACTION = 0xF,
  UTF8PROC_DECOMP_TYPE_COMPAT = 0x10,
};

/* 172 */
enum $2B114738104DC3B4321B90927040B223 : __int32
{
  UTF8PROC_BOUNDCLASS_START = 0x0,
  UTF8PROC_BOUNDCLASS_OTHER = 0x1,
  UTF8PROC_BOUNDCLASS_CR = 0x2,
  UTF8PROC_BOUNDCLASS_LF = 0x3,
  UTF8PROC_BOUNDCLASS_CONTROL = 0x4,
  UTF8PROC_BOUNDCLASS_EXTEND = 0x5,
  UTF8PROC_BOUNDCLASS_L = 0x6,
  UTF8PROC_BOUNDCLASS_V = 0x7,
  UTF8PROC_BOUNDCLASS_T = 0x8,
  UTF8PROC_BOUNDCLASS_LV = 0x9,
  UTF8PROC_BOUNDCLASS_LVT = 0xA,
  UTF8PROC_BOUNDCLASS_REGIONAL_INDICATOR = 0xB,
  UTF8PROC_BOUNDCLASS_SPACINGMARK = 0xC,
};

/* 173 */
struct kh_int_set_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  khint32_t *keys;
  char *vals;
};

/* 174 */
struct __declspec(align(8)) string_script
{
  script_t script;
  size_t len;
  _Bool ascii;
};

/* 175 */
typedef string_script string_script_t;

/* 176 */
enum gender_t : __int32
{
  GENDER_MASCULINE = 0x0,
  GENDER_FEMININE = 0x1,
  GENDER_NEUTER = 0x2,
  GENDER_NONE = 0x3,
  NUM_GENDERS = 0x4,
};

/* 177 */
enum grammatical_category_t : __int32
{
  CATEGORY_PLURAL = 0x0,
  CATEGORY_DEFAULT = 0x1,
  NUM_CATEGORIES = 0x2,
};

/* 178 */
enum numex_left_context : __int32
{
  NUMEX_LEFT_CONTEXT_NONE = 0x0,
  NUMEX_LEFT_CONTEXT_ADD = 0x1,
  NUMEX_LEFT_CONTEXT_MULTIPLY = 0x2,
  NUMEX_LEFT_CONTEXT_CONCAT_ONLY_IF_NUMBER = 0x3,
};

/* 179 */
enum numex_right_context : __int32
{
  NUMEX_RIGHT_CONTEXT_NONE = 0x0,
  NUMEX_RIGHT_CONTEXT_ADD = 0x1,
};

/* 180 */
enum numex_rule_type : __int32
{
  NUMEX_CARDINAL_RULE = 0x0,
  NUMEX_ORDINAL_RULE = 0x1,
  NUMEX_ORDINAL_INDICATOR_RULE = 0x2,
  NUMEX_DECIMAL_RULE = 0x3,
  NUMEX_NEGATION_RULE = 0x4,
  NUMEX_STOPWORD = 0x5,
  NUMEX_NULL = 0x6,
};

/* 181 */
struct numex_rule
{
  numex_left_context left_context_type;
  numex_right_context right_context_type;
  numex_rule_type rule_type;
  gender_t gender;
  grammatical_category_t category;
  uint32_t radix;
  int64_t value;
};

/* 182 */
typedef numex_rule numex_rule_t;

/* 183 */
struct numex_rule_array
{
  size_t n;
  size_t m;
  numex_rule_t *a;
};

/* 184 */
struct ordinal_indicator
{
  char *key;
  gender_t gender;
  grammatical_category_t category;
  char *suffix;
};

/* 185 */
typedef ordinal_indicator ordinal_indicator_t;

/* 186 */
struct ordinal_indicator_array
{
  size_t n;
  size_t m;
  ordinal_indicator_t **a;
};

/* 187 */
struct numex_language
{
  char *name;
  _Bool whole_tokens_only;
  size_t rules_index;
  size_t num_rules;
  size_t ordinals_index;
  size_t num_ordinals;
};

/* 188 */
typedef numex_language numex_language_t;

/* 189 */
struct kh_str_numex_language_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  kh_cstr_t *keys;
  numex_language_t **vals;
};

/* 190 */
struct numex_table_t
{
  kh_str_numex_language_t *languages;
  trie_t *trie;
  numex_rule_array *rules;
  ordinal_indicator_array *ordinal_indicators;
};

/* 191 */
struct numex_result
{
  int64_t value;
  gender_t gender;
  grammatical_category_t category;
  _Bool is_ordinal;
  size_t start;
  size_t len;
};

/* 192 */
typedef numex_result numex_result_t;

/* 193 */
struct numex_result_array
{
  size_t n;
  size_t m;
  numex_result_t *a;
};

/* 194 */
enum numex_search_state_type : __int32
{
  NUMEX_SEARCH_STATE_BEGIN = 0x0,
  NUMEX_SEARCH_STATE_SKIP_TOKEN = 0x1,
  NUMEX_SEARCH_STATE_PARTIAL_MATCH = 0x2,
  NUMEX_SEARCH_STATE_MATCH = 0x3,
};

/* 195 */
struct numex_search_state
{
  uint32_t node_id;
  numex_search_state_type state;
};

/* 196 */
typedef numex_search_state numex_search_state_t;

/* 197 */
struct kh_str_double_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  kh_cstr_t *keys;
  double *vals;
};

/* 198 */
struct script_code
{
  script_t script;
  char *code;
};

/* 199 */
typedef script_code script_code_t;

/* 200 */
struct script_languages
{
  size_t num_languages;
  char *languages[57];
};

/* 201 */
typedef script_languages script_languages_t;

/* 202 */
struct double_array
{
  size_t n;
  size_t m;
  double *a;
};

/* 203 */
struct uint32_matrix_t
{
  size_t m;
  size_t n;
  uint32_t *values;
};

/* 204 */
struct double_matrix_t
{
  size_t m;
  size_t n;
  double *values;
};

/* 205 */
struct sparse_matrix_t
{
  uint32_t m;
  uint32_t n;
  uint32_array *indptr;
  uint32_array *indices;
  double_array *data;
};

/* 206 */
struct averaged_perceptron
{
  uint32_t num_features;
  uint32_t num_classes;
  trie_t *features;
  cstring_array *classes;
  sparse_matrix_t *weights;
  double_array *scores;
};

/* 207 */
typedef averaged_perceptron averaged_perceptron_t;

/* 208 */
typedef _Bool (*tagger_feature_function)(void *, void *, tokenized_string_t *, uint32_t);

/* 209 */
struct crf_context
{
  int flag;
  size_t num_labels;
  size_t num_items;
  double log_norm;
  double_matrix_t *state;
  double_matrix_t *state_trans;
  double_matrix_t *trans;
  double_matrix_t *alpha_score;
  double_matrix_t *beta_score;
  double_array *scale_factor;
  double_array *row;
  double_array *row_trans;
  uint32_matrix_t *backward_edges;
  double_matrix_t *exp_state;
  double_matrix_t *exp_state_trans;
  double_matrix_t *exp_trans;
  double_matrix_t *mexp_state;
  double_matrix_t *mexp_state_trans;
  double_matrix_t *mexp_trans;
};

/* 210 */
typedef crf_context crf_context_t;

/* 211 */
struct crf
{
  uint32_t num_classes;
  cstring_array *classes;
  trie_t *state_features;
  sparse_matrix_t *weights;
  trie_t *state_trans_features;
  sparse_matrix_t *state_trans_weights;
  double_matrix_t *trans_weights;
  uint32_array *viterbi;
  crf_context_t *context;
};

/* 212 */
typedef crf crf_t;

/* 213 */
enum graph_type_t : __int32
{
  GRAPH_DIRECTED = 0x0,
  GRAPH_UNDIRECTED = 0x1,
  GRAPH_BIPARTITE = 0x2,
};

/* 214 */
struct graph_t
{
  graph_type_t type;
  uint32_t m;
  uint32_t n;
  _Bool fixed_rows;
  uint32_array *indptr;
  uint32_array *indices;
};

/* 215 */
enum $9B50958AA4E31C60317EA82E7F24443F : __int32
{
  ADDRESS_PARSER_BOUNDARY_NONE = 0x0,
  ADDRESS_PARSER_BOUNDARY_SUBURB = 0x1,
  ADDRESS_PARSER_BOUNDARY_CITY_DISTRICT = 0x2,
  ADDRESS_PARSER_BOUNDARY_CITY = 0x3,
  ADDRESS_PARSER_BOUNDARY_STATE_DISTRICT = 0x4,
  ADDRESS_PARSER_BOUNDARY_ISLAND = 0x5,
  ADDRESS_PARSER_BOUNDARY_STATE = 0x6,
  ADDRESS_PARSER_BOUNDARY_COUNTRY_REGION = 0x7,
  ADDRESS_PARSER_BOUNDARY_COUNTRY = 0x8,
  ADDRESS_PARSER_BOUNDARY_WORLD_REGION = 0x9,
  NUM_ADDRESS_PARSER_BOUNDARY_TYPES = 0xA,
};

/* 216 */
struct $A068FB3239C97E762C54F02B54420FF6
{
  unsigned __int32 components : 16;
  unsigned __int32 most_common : 16;
};

/* 217 */
union address_parser_types
{
  uint32_t value;
  $A068FB3239C97E762C54F02B54420FF6 _anon_0;
};

/* 218 */
typedef address_parser_types address_parser_types_t;

/* 219 */
struct address_parser_types_array
{
  size_t n;
  size_t m;
  address_parser_types_t *a;
};

/* 220 */
struct address_parser_context
{
  char *language;
  char *country;
  cstring_array *features;
  cstring_array *prev_tag_features;
  cstring_array *prev2_tag_features;
  char_array *phrase;
  char_array *context_phrase;
  char_array *long_context_phrase;
  char_array *prefix_phrase;
  char_array *context_prefix_phrase;
  char_array *long_context_prefix_phrase;
  char_array *suffix_phrase;
  char_array *context_suffix_phrase;
  char_array *long_context_suffix_phrase;
  char_array *component_phrase;
  char_array *context_component_phrase;
  char_array *long_context_component_phrase;
  cstring_array *ngrams;
  char_array *sub_token;
  token_array *sub_tokens;
  uint32_array *separators;
  cstring_array *normalized;
  token_array *normalized_tokens;
  cstring_array *normalized_admin;
  token_array *normalized_admin_tokens;
  phrase_array *address_dictionary_phrases;
  int64_array *address_phrase_memberships;
  phrase_array *component_phrases;
  int64_array *component_phrase_memberships;
  phrase_array *postal_code_phrases;
  int64_array *postal_code_phrase_memberships;
  phrase_array *prefix_phrases;
  phrase_array *suffix_phrases;
  tokenized_string_t *tokenized_str;
};

/* 221 */
typedef address_parser_context address_parser_context_t;

/* 222 */
enum address_parser_model_type : __int32
{
  ADDRESS_PARSER_TYPE_GREEDY_AVERAGED_PERCEPTRON = 0x0,
  ADDRESS_PARSER_TYPE_CRF = 0x1,
};

/* 223 */
typedef address_parser_model_type address_parser_model_type_t;

/* 224 */
struct __declspec(align(8)) parser_options
{
  uint64_t rare_word_threshold;
  _Bool print_features;
};

/* 225 */
typedef parser_options parser_options_t;

/* 226 */
union $E71B9F92E0E95E86F128E33E96FFC938
{
  averaged_perceptron_t *ap;
  crf_t *crf;
};

/* 227 */
struct address_parser
{
  parser_options_t options;
  size_t num_classes;
  address_parser_model_type_t model_type;
  $E71B9F92E0E95E86F128E33E96FFC938 model;
  address_parser_context_t *context;
  trie_t *vocab;
  trie_t *phrases;
  address_parser_types_array *phrase_types;
  trie_t *postal_codes;
  graph_t *postal_code_contexts;
};

/* 228 */
typedef address_parser address_parser_t;

/* 229 */
enum address_parser_phrase_type_t : __int32
{
  ADDRESS_PARSER_NULL_PHRASE = 0x0,
  ADDRESS_PARSER_DICTIONARY_PHRASE = 0x1,
  ADDRESS_PARSER_COMPONENT_PHRASE = 0x2,
  ADDRESS_PARSER_PREFIX_PHRASE = 0x3,
  ADDRESS_PARSER_SUFFIX_PHRASE = 0x4,
};

/* 230 */
struct address_parser_phrase
{
  char *str;
  address_parser_phrase_type_t type;
  phrase_t phrase;
};

/* 231 */
typedef address_parser_phrase address_parser_phrase_t;

/* 232 */
struct scanner
{
  unsigned __int8 *src;
  unsigned __int8 *cursor;
  unsigned __int8 *start;
  unsigned __int8 *end;
};

/* 233 */
typedef scanner scanner_t;

/* 234 */
enum address_parser_training_data_fields : __int32
{
  ADDRESS_PARSER_FIELD_LANGUAGE = 0x0,
  ADDRESS_PARSER_FIELD_COUNTRY = 0x1,
  ADDRESS_PARSER_FIELD_ADDRESS = 0x2,
  ADDRESS_PARSER_FILE_NUM_TOKENS = 0x3,
};

/* 235 */
struct address_parser_data_set
{
  FILE *f;
  token_array *tokens;
  tokenized_string_t *tokenized_str;
  cstring_array *normalizations;
  size_t norm;
  cstring_array *labels;
  uint32_array *separators;
  char_array *language;
  char_array *country;
};

/* 236 */
typedef address_parser_data_set address_parser_data_set_t;

/* 237 */
enum $B4EBAC32BC4A71628124FAD4F3703FC2 : __int32
{
  CRF_CONTEXT_BASE = 0x1,
  CRF_CONTEXT_VITERBI = 0x1,
  CRF_CONTEXT_MARGINALS = 0x2,
  CRF_CONTEXT_ALL = 0xFF,
};

/* 238 */
struct __declspec(align(16)) __v2df
{
  __int8 body[1];
};

/* 239 */
struct __declspec(align(16)) __v4si
{
  __int8 body[1];
};

/* 240 */
struct __declspec(align(16)) __v4su
{
  __int8 body[1];
};

/* 241 */
union __declspec(align(16)) __m128i
{
  __int8 m128i_i8[16];
  __int16 m128i_i16[8];
  __int32 m128i_i32[4];
  __int64 m128i_i64[2];
  unsigned __int8 m128i_u8[16];
  unsigned __int16 m128i_u16[8];
  unsigned __int32 m128i_u32[4];
  unsigned __int64 m128i_u64[2];
};

/* 242 */
union __declspec(align(8)) __m64
{
  unsigned __int64 m64_u64;
  float m64_f32[2];
  __int8 m64_i8[8];
  __int16 m64_i16[4];
  __int32 m64_i32[2];
  __int64 m64_i64;
  unsigned __int8 m64_u8[8];
  unsigned __int16 m64_u16[4];
  unsigned __int32 m64_u32[2];
};

/* 243 */
union __declspec(align(16)) __m128
{
  float m128_f32[4];
  unsigned __int64 m128_u64[2];
  __int8 m128_i8[16];
  __int16 m128_i16[8];
  __int32 m128_i32[4];
  __int64 m128_i64[2];
  unsigned __int8 m128_u8[16];
  unsigned __int16 m128_u16[8];
  unsigned __int32 m128_u32[4];
};

/* 244 */
struct __m128d
{
  double m128d_f64[2];
};

/* 245 */
union __declspec(align(32)) __m256
{
  float m256_f32[8];
};

/* 246 */
union __declspec(align(32)) __m256d
{
  double m256d_f64[4];
};

/* 247 */
union __declspec(align(32)) __m256i
{
  __int8 m256i_i8[32];
  __int16 m256i_i16[16];
  __int32 m256i_i32[8];
  __int64 m256i_i64[4];
  unsigned __int8 m256i_u8[32];
  unsigned __int16 m256i_u16[16];
  unsigned __int32 m256i_u32[8];
  unsigned __int64 m256i_u64[4];
};

/* 248 */
typedef __m128i __m128i_0;

/* 249 */
typedef __m128d __m128d_0;

/* 250 */
struct column_value
{
  uint32_t col;
  double val;
};

/* 251 */
typedef column_value column_value_t;

/* 252 */
struct column_value_array
{
  size_t n;
  size_t m;
  column_value_t *a;
};

/* 253 */
struct graph_edge
{
  uint32_t v1;
  uint32_t v2;
};

/* 254 */
typedef graph_edge graph_edge_t;

/* 255 */
struct graph_edge_array
{
  size_t n;
  size_t m;
  graph_edge_t *a;
};

/* 256 */
struct graph_builder
{
  graph_type_t type;
  size_t m;
  size_t n;
  _Bool fixed_rows;
  graph_edge_array *edges;
};

/* 257 */
typedef graph_builder graph_builder_t;

/* 258 */
struct double_index
{
  size_t index;
  double value;
};

/* 259 */
typedef double_index double_index_t;

/* 260 */
enum matrix_type_t : __int32
{
  MATRIX_DENSE = 0x0,
  MATRIX_SPARSE = 0x1,
};

/* 261 */
union $330ABB4DB689696B985D9CBAA94613B8
{
  double_matrix_t *dense;
  sparse_matrix_t *sparse;
};

/* 262 */
struct language_classifier
{
  size_t num_labels;
  size_t num_features;
  trie_t *features;
  cstring_array *labels;
  matrix_type_t weights_type;
  $330ABB4DB689696B985D9CBAA94613B8 weights;
};

/* 263 */
typedef language_classifier language_classifier_t;

/* 264 */
struct __declspec(align(8)) uint32_t_index
{
  size_t index;
  uint32_t value;
};

/* 265 */
typedef uint32_t_index uint32_t_index_t;

/* 266 */
struct feature_count_array
{
  size_t n;
  size_t m;
  kh_str_double_t **a;
};

/* 267 */
struct place
{
  char *name;
  char *house_number;
  char *street;
  char *building;
  char *entrance;
  char *staircase;
  char *level;
  char *unit;
  char *po_box;
  char *metro_station;
  char *suburb;
  char *city_district;
  char *city;
  char *state_district;
  char *island;
  char *state;
  char *country_region;
  char *country;
  char *world_region;
  char *postal_code;
  char *telephone;
  char *website;
};

/* 268 */
typedef place place_t;

/* 269 */
struct double_metaphone_codes
{
  char *primary;
  char *secondary;
};

/* 270 */
typedef double_metaphone_codes double_metaphone_codes_t;

/* 271 */
enum $829E8F7E3089F1E3B5F624DF9FCCF12B : __int32
{
  GEOHASH_OK = 0x0,
  GEOHASH_NOTSUPPORTED = 0x1,
  GEOHASH_INVALIDCODE = 0x2,
  GEOHASH_INVALIDARGUMENT = 0x3,
  GEOHASH_INTERNALERROR = 0x4,
  GEOHASH_NOMEMORY = 0x5,
};

/* 272 */
union i64_to_double::$5AFC769C1D2682A58ECE8EB460B867EE
{
  double d;
  uint64_t i64;
};

/* 273 */
union double_to_i64::$5AFC769C1D2682A58ECE8EB460B867EE
{
  double d;
  uint64_t i64;
};

/* 274 */
struct soft_tfidf_options
{
  double jaro_winkler_min;
  size_t jaro_winkler_min_length;
  size_t damerau_levenshtein_max;
  size_t damerau_levenshtein_min_length;
  _Bool possible_affine_gap_abbreviations;
  size_t strict_abbreviation_min_length;
  double strict_abbreviation_sim;
};

/* 275 */
typedef soft_tfidf_options soft_tfidf_options_t;

/* 276 */
struct affine_gap_edits
{
  size_t num_matches;
  size_t num_mismatches;
  size_t num_transpositions;
  size_t num_gap_opens;
  size_t num_gap_extensions;
};

/* 277 */
typedef affine_gap_edits affine_gap_edits_t;

/* 278 */
enum affine_gap_op : __int32
{
  AFFINE_CHAR_MATCH = 0x0,
  AFFINE_CHAR_MISMATCH = 0x1,
  AFFINE_TRANSPOSITION = 0x2,
  AFFINE_GAP_OPEN = 0x3,
  AFFINE_GAP_EXTEND = 0x4,
};

/* 279 */
enum canonical_match_t : __int32
{
  CANONICAL_NO_MATCH = 0x0,
  NEITHER_CANONICAL = 0x1,
  SECOND_CANONICAL = 0x2,
  FIRST_CANONICAL = 0x3,
  BOTH_CANONICAL = 0x4,
};

/* 280 */
typedef unsigned __int64 khint64_t;

/* 281 */
struct kh_int_uint32_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  khint32_t *keys;
  uint32_t *vals;
};

/* 282 */
struct kh_int64_uint32_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  khint64_t *keys;
  uint32_t *vals;
};

/* 283 */
struct kh_int64_double_t
{
  khint_t n_buckets;
  khint_t size;
  khint_t n_occupied;
  khint_t upper_bound;
  khint32_t *flags;
  khint64_t *keys;
  double *vals;
};

/* 284 */
struct __declspec(align(8)) int32_t_index
{
  size_t index;
  int32_t value;
};

/* 285 */
typedef int32_t_index int32_t_index_t;

/* 286 */
struct int64_t_index
{
  size_t index;
  int64_t value;
};

/* 287 */
typedef int64_t_index int64_t_index_t;

/* 288 */
struct uint64_t_index
{
  size_t index;
  uint64_t value;
};

/* 289 */
typedef uint64_t_index uint64_t_index_t;

/* 290 */
struct __declspec(align(8)) float_index
{
  size_t index;
  float value;
};

/* 291 */
typedef float_index float_index_t;

/* 292 */
typedef void (*_PHNDLR)(int);

/* 293 */
struct _XCPT_ACTION
{
  unsigned __int64 XcptNum;
  int SigNum;
  _PHNDLR XcptAction;
};

/* 294 */
typedef unsigned int DWORD;

/* 295 */
typedef void *PVOID;

/* 296 */
struct _GUID
{
  unsigned int Data1;
  unsigned __int16 Data2;
  unsigned __int16 Data3;
  unsigned __int8 Data4[8];
};

/* 297 */
typedef _GUID GUID;

/* 298 */
typedef GUID IID;

/* 299 */
typedef GUID CLSID;

/* 300 */
typedef GUID FMTID;

/* 301 */
struct HINSTANCE__
{
  int unused;
};

/* 302 */
typedef HINSTANCE__ *HINSTANCE;

/* 303 */
typedef void *RPC_IF_HANDLE;

/* 304 */
enum tagCOINITBASE : __int32
{
  COINITBASE_MULTITHREADED = 0x0,
};

/* 305 */
enum VARENUM : __int32
{
  VT_EMPTY = 0x0,
  VT_NULL = 0x1,
  VT_I2 = 0x2,
  VT_I4 = 0x3,
  VT_R4 = 0x4,
  VT_R8 = 0x5,
  VT_CY = 0x6,
  VT_DATE = 0x7,
  VT_BSTR = 0x8,
  VT_DISPATCH = 0x9,
  VT_ERROR = 0xA,
  VT_BOOL = 0xB,
  VT_VARIANT = 0xC,
  VT_UNKNOWN = 0xD,
  VT_DECIMAL = 0xE,
  VT_I1 = 0x10,
  VT_UI1 = 0x11,
  VT_UI2 = 0x12,
  VT_UI4 = 0x13,
  VT_I8 = 0x14,
  VT_UI8 = 0x15,
  VT_INT = 0x16,
  VT_UINT = 0x17,
  VT_VOID = 0x18,
  VT_HRESULT = 0x19,
  VT_PTR = 0x1A,
  VT_SAFEARRAY = 0x1B,
  VT_CARRAY = 0x1C,
  VT_USERDEFINED = 0x1D,
  VT_LPSTR = 0x1E,
  VT_LPWSTR = 0x1F,
  VT_RECORD = 0x24,
  VT_INT_PTR = 0x25,
  VT_UINT_PTR = 0x26,
  VT_FILETIME = 0x40,
  VT_BLOB = 0x41,
  VT_STREAM = 0x42,
  VT_STORAGE = 0x43,
  VT_STREAMED_OBJECT = 0x44,
  VT_STORED_OBJECT = 0x45,
  VT_BLOB_OBJECT = 0x46,
  VT_CF = 0x47,
  VT_CLSID = 0x48,
  VT_VERSIONED_STREAM = 0x49,
  VT_BSTR_BLOB = 0xFFF,
  VT_VECTOR = 0x1000,
  VT_ARRAY = 0x2000,
  VT_BYREF = 0x4000,
  VT_RESERVED = 0x8000,
  VT_ILLEGAL = 0xFFFF,
  VT_ILLEGALMASKED = 0xFFF,
  VT_TYPEMASK = 0xFFF,
};

/* 306 */
struct _SCARD_IO_REQUEST
{
  DWORD dwProtocol;
  DWORD cbPciLength;
};

/* 307 */
typedef _SCARD_IO_REQUEST SCARD_IO_REQUEST;

/* 309 */
typedef int BOOL;

/* 310 */
typedef void *LPVOID;

/* 311 */
union _mbstate_t::$69411BACE686AE668665FE2C3FA24C90
{
  wint_t __wch;
  unsigned __int8 __wchb[4];
};

/* 313 */
struct _reent::$4B38DE94CF860B65789912D88CF87031::$1F270FF73DBE1F4C0CCB08D4DF340292
{
  unsigned int _unused_rand;
  char *_strtok_last;
  char _asctime_buf[26];
  __tm _localtime_buf;
  int _gamma_signgam;
  unsigned __int64 _rand_next;
  _rand48 _r48;
  _mbstate_t _mblen_state;
  _mbstate_t _mbtowc_state;
  _mbstate_t _wctomb_state;
  char _l64a_buf[8];
  char _signal_buf[24];
  int _getdate_err;
  _mbstate_t _mbrlen_state;
  _mbstate_t _mbrtowc_state;
  _mbstate_t _mbsrtowcs_state;
  _mbstate_t _wcrtomb_state;
  _mbstate_t _wcsrtombs_state;
  int _h_errno;
};

/* 314 */
struct _reent::$4B38DE94CF860B65789912D88CF87031::$96943D833C94E9272B7BA75406C557F3
{
  unsigned __int8 *_nextf[30];
  unsigned int _nmalloc[30];
};

/* 312 */
union _reent::$4B38DE94CF860B65789912D88CF87031
{
  _reent::$4B38DE94CF860B65789912D88CF87031::$1F270FF73DBE1F4C0CCB08D4DF340292 _reent;
  _reent::$4B38DE94CF860B65789912D88CF87031::$96943D833C94E9272B7BA75406C557F3 _unused;
};

/* 315 */
typedef unsigned __int64 ULONG_PTR;

/* 316 */
typedef ULONG_PTR DWORD_PTR;

/* 317 */
typedef HINSTANCE HMODULE;

/* 318 */
struct per_process
{
  char *initial_sp;
  uint32_t magic_biscuit;
  uint32_t dll_major;
  uint32_t dll_minor;
  _reent **impure_ptr_ptr;
  void *(*malloc)(size_t);
  void (*free)(void *);
  void *(*realloc)(void *, size_t);
  int *fmode_ptr;
  int (*main)(int, char **, char **);
  void (**ctors)(void);
  void (**dtors)(void);
  void *data_start;
  void *data_end;
  void *bss_start;
  void *bss_end;
  void *(*calloc)(size_t, size_t);
  void (*premain[4])(int, char **, per_process *);
  int32_t run_ctors_p;
  DWORD_PTR unused[7];
  per_process_cxx_malloc *cxx_malloc;
  HMODULE hmodule;
  DWORD api_major;
  DWORD api_minor;
  DWORD_PTR unused2[4];
  int (*posix_memalign)(void **, size_t, size_t);
  void *pseudo_reloc_start;
  void *pseudo_reloc_end;
  void *image_base;
  void *threadinterface;
  _reent *impure_ptr;
};

/* 385 */
typedef unsigned __int64 std::size_t;

/* 319 */
struct per_process_cxx_malloc
{
  void *(*oper_new)(std::size_t);
  void *(*oper_new__)(std::size_t);
  void (*oper_delete)(void *);
  void (*oper_delete__)(void *);
  void *(*oper_new_nt)(std::size_t, const std::nothrow_t *);
  void *(*oper_new___nt)(std::size_t, const std::nothrow_t *);
  void (*oper_delete_nt)(void *, const std::nothrow_t *);
  void (*oper_delete___nt)(void *, const std::nothrow_t *);
};

/* 386 */
struct std::nothrow_t
{
  __int8 gap0[1];
};

/* 320 */
typedef int (*MainFunc)(int, char **, char **);

/* 321 */
typedef __int64 __intptr_t;

/* 322 */
typedef unsigned __int64 __uintptr_t;

/* 323 */
typedef __uint32_t __uid_t;

/* 324 */
typedef int __pid_t;

/* 325 */
typedef unsigned __int64 __timer_t;

/* 326 */
typedef __intptr_t intptr_t;

/* 327 */
typedef __uintptr_t uintptr_t;

/* 328 */
typedef unsigned __int64 __sigset_t;

/* 329 */
typedef __sigset_t sigset_t;

/* 330 */
typedef unsigned __int64 clock_t;

/* 331 */
typedef __uid_t uid_t;

/* 332 */
typedef __pid_t pid_t;

/* 333 */
typedef __timer_t timer_t;

/* 334 */
struct pthread;

/* 335 */
struct __declspec(align(4)) strace
{
  unsigned __int8 _active;
  int version;
  int lmicrosec;
  bool execing;
};

/* 338 */
typedef unsigned __int64 DWORD64;

/* 339 */
typedef unsigned __int16 WORD;

/* 343 */
typedef unsigned __int8 BYTE;

/* 346 */
typedef unsigned __int64 ULONGLONG;

/* 347 */
typedef __int64 LONGLONG;

/* 345 */
struct _M128A
{
  ULONGLONG Low;
  LONGLONG High;
};

/* 344 */
typedef _M128A M128A;

/* 342 */
struct _XMM_SAVE_AREA32
{
  WORD ControlWord;
  WORD StatusWord;
  BYTE TagWord;
  BYTE Reserved1;
  WORD ErrorOpcode;
  DWORD ErrorOffset;
  WORD ErrorSelector;
  WORD Reserved2;
  DWORD DataOffset;
  WORD DataSelector;
  WORD Reserved3;
  DWORD MxCsr;
  DWORD MxCsr_Mask;
  M128A FloatRegisters[8];
  M128A XmmRegisters[16];
  BYTE Reserved4[96];
};

/* 341 */
typedef _XMM_SAVE_AREA32 XMM_SAVE_AREA32;

/* 348 */
struct _CONTEXT::$F0F0B9CA8A06C71949729F8D6684CE93::$5DF16254768D0A7F4201DEC858FAFA9B
{
  M128A Header[2];
  M128A Legacy[8];
  M128A Xmm0;
  M128A Xmm1;
  M128A Xmm2;
  M128A Xmm3;
  M128A Xmm4;
  M128A Xmm5;
  M128A Xmm6;
  M128A Xmm7;
  M128A Xmm8;
  M128A Xmm9;
  M128A Xmm10;
  M128A Xmm11;
  M128A Xmm12;
  M128A Xmm13;
  M128A Xmm14;
  M128A Xmm15;
};

/* 340 */
union _CONTEXT::$F0F0B9CA8A06C71949729F8D6684CE93
{
  XMM_SAVE_AREA32 FltSave;
  XMM_SAVE_AREA32 FloatSave;
  _CONTEXT::$F0F0B9CA8A06C71949729F8D6684CE93::$5DF16254768D0A7F4201DEC858FAFA9B _anon_0;
};

/* 337 */
struct _CONTEXT
{
  DWORD64 P1Home;
  DWORD64 P2Home;
  DWORD64 P3Home;
  DWORD64 P4Home;
  DWORD64 P5Home;
  DWORD64 P6Home;
  DWORD ContextFlags;
  DWORD MxCsr;
  WORD SegCs;
  WORD SegDs;
  WORD SegEs;
  WORD SegFs;
  WORD SegGs;
  WORD SegSs;
  DWORD EFlags;
  DWORD64 Dr0;
  DWORD64 Dr1;
  DWORD64 Dr2;
  DWORD64 Dr3;
  DWORD64 Dr6;
  DWORD64 Dr7;
  DWORD64 Rax;
  DWORD64 Rcx;
  DWORD64 Rdx;
  DWORD64 Rbx;
  DWORD64 Rsp;
  DWORD64 Rbp;
  DWORD64 Rsi;
  DWORD64 Rdi;
  DWORD64 R8;
  DWORD64 R9;
  DWORD64 R10;
  DWORD64 R11;
  DWORD64 R12;
  DWORD64 R13;
  DWORD64 R14;
  DWORD64 R15;
  DWORD64 Rip;
  _CONTEXT::$F0F0B9CA8A06C71949729F8D6684CE93 _anon_0;
  M128A VectorRegister[26];
  DWORD64 VectorControl;
  DWORD64 DebugControl;
  DWORD64 LastBranchToRip;
  DWORD64 LastBranchFromRip;
  DWORD64 LastExceptionToRip;
  DWORD64 LastExceptionFromRip;
};

/* 349 */
typedef unsigned int ULONG;

/* 350 */
typedef unsigned __int16 USHORT;

/* 351 */
typedef int WINBOOL;

/* 352 */
typedef unsigned int UINT;

/* 355 */
typedef unsigned __int64 UINT64;

/* 356 */
typedef int LONG;

/* 357 */
typedef wchar_t WCHAR;

/* 358 */
typedef WCHAR *PWCHAR;

/* 359 */
typedef WCHAR *PWSTR;

/* 360 */
typedef void *HANDLE;

/* 362 */
struct _LARGE_INTEGER::$F50D1B4661C66265C46503353F437A80
{
  DWORD LowPart;
  LONG HighPart;
};

/* 361 */
union _LARGE_INTEGER
{
  _LARGE_INTEGER::$F50D1B4661C66265C46503353F437A80 _anon_0;
  _LARGE_INTEGER::$F50D1B4661C66265C46503353F437A80 u;
  LONGLONG QuadPart;
};

/* 363 */
typedef _LARGE_INTEGER LARGE_INTEGER;

/* 364 */
typedef _CONTEXT CONTEXT;

/* 365 */
typedef PVOID PSID;

/* 366 */
struct _OSVERSIONINFOEXW
{
  DWORD dwOSVersionInfoSize;
  DWORD dwMajorVersion;
  DWORD dwMinorVersion;
  DWORD dwBuildNumber;
  DWORD dwPlatformId;
  WCHAR szCSDVersion[128];
  WORD wServicePackMajor;
  WORD wServicePackMinor;
  WORD wSuiteMask;
  BYTE wProductType;
  BYTE wReserved;
};

/* 367 */
typedef _OSVERSIONINFOEXW RTL_OSVERSIONINFOEXW;

/* 368 */
struct __declspec(align(8)) _SECURITY_ATTRIBUTES
{
  DWORD nLength;
  LPVOID lpSecurityDescriptor;
  WINBOOL bInheritHandle;
};

/* 369 */
typedef _SECURITY_ATTRIBUTES SECURITY_ATTRIBUTES;

/* 370 */
typedef DWORD (*PTHREAD_START_ROUTINE)(LPVOID);

/* 371 */
typedef PTHREAD_START_ROUTINE LPTHREAD_START_ROUTINE;

/* 374 */
struct _SYSTEM_INFO::$B8673FED28A2CA04C97AA7A6D25ADC6D::$479D639F709DDFBEE37D60638071C5D6
{
  WORD wProcessorArchitecture;
  WORD wReserved;
};

/* 373 */
union _SYSTEM_INFO::$B8673FED28A2CA04C97AA7A6D25ADC6D
{
  DWORD dwOemId;
  _SYSTEM_INFO::$B8673FED28A2CA04C97AA7A6D25ADC6D::$479D639F709DDFBEE37D60638071C5D6 _anon_0;
};

/* 372 */
struct _SYSTEM_INFO
{
  _SYSTEM_INFO::$B8673FED28A2CA04C97AA7A6D25ADC6D _anon_0;
  DWORD dwPageSize;
  LPVOID lpMinimumApplicationAddress;
  LPVOID lpMaximumApplicationAddress;
  DWORD_PTR dwActiveProcessorMask;
  DWORD dwNumberOfProcessors;
  DWORD dwProcessorType;
  DWORD dwAllocationGranularity;
  WORD wProcessorLevel;
  WORD wProcessorRevision;
};

/* 375 */
typedef _SYSTEM_INFO SYSTEM_INFO;

/* 376 */
struct _UNICODE_STRING
{
  USHORT Length;
  USHORT MaximumLength;
  PWSTR Buffer;
};

/* 377 */
typedef _UNICODE_STRING UNICODE_STRING;

/* 378 */
struct wincapc
{
  SYSTEM_INFO system_info;
  RTL_OSVERSIONINFOEXW version;
  char osnam[40];
  ULONG_PTR wow64;
  void *caps;
};

/* 379 */
struct lc_collate_T
{
  __uint32_t lcid;
  int (*mbtowc)(_reent *, wchar_t *, const char *, size_t, mbstate_t *);
  char codeset[32];
};

/* 380 */
struct lc_ctype_T
{
  const char *codeset;
  const char *mb_cur_max;
  const char *outdigits[10];
  const wchar_t *woutdigits[10];
};

/* 381 */
struct lc_monetary_T
{
  const char *int_curr_symbol;
  const char *currency_symbol;
  const char *mon_decimal_point;
  const char *mon_thousands_sep;
  const char *mon_grouping;
  const char *positive_sign;
  const char *negative_sign;
  const char *int_frac_digits;
  const char *frac_digits;
  const char *p_cs_precedes;
  const char *p_sep_by_space;
  const char *n_cs_precedes;
  const char *n_sep_by_space;
  const char *p_sign_posn;
  const char *n_sign_posn;
  const char *int_p_cs_precedes;
  const char *int_p_sep_by_space;
  const char *int_n_cs_precedes;
  const char *int_n_sep_by_space;
  const char *int_p_sign_posn;
  const char *int_n_sign_posn;
  const char *codeset;
  const wchar_t *wint_curr_symbol;
  const wchar_t *wcurrency_symbol;
  const wchar_t *wmon_decimal_point;
  const wchar_t *wmon_thousands_sep;
  const wchar_t *wpositive_sign;
  const wchar_t *wnegative_sign;
};

/* 382 */
struct lc_numeric_T
{
  const char *decimal_point;
  const char *thousands_sep;
  const char *grouping;
  const char *codeset;
  const wchar_t *wdecimal_point;
  const wchar_t *wthousands_sep;
};

/* 383 */
struct lc_time_T
{
  const char *mon[12];
  const char *month[12];
  const char *wday[7];
  const char *weekday[7];
  const char *X_fmt;
  const char *x_fmt;
  const char *c_fmt;
  const char *am_pm[2];
  const char *date_fmt;
  const char *alt_month[12];
  const char *md_order;
  const char *ampm_fmt;
  const char *era;
  const char *era_d_fmt;
  const char *era_d_t_fmt;
  const char *era_t_fmt;
  const char *alt_digits;
  const char *codeset;
  const wchar_t *wmon[12];
  const wchar_t *wmonth[12];
  const wchar_t *wwday[7];
  const wchar_t *wweekday[7];
  const wchar_t *wX_fmt;
  const wchar_t *wx_fmt;
  const wchar_t *wc_fmt;
  const wchar_t *wam_pm[2];
  const wchar_t *wdate_fmt;
  const wchar_t *wampm_fmt;
  const wchar_t *wera;
  const wchar_t *wera_d_fmt;
  const wchar_t *wera_d_t_fmt;
  const wchar_t *wera_t_fmt;
  const wchar_t *walt_digits;
};

/* 384 */
struct lc_messages_T
{
  const char *yesexpr;
  const char *noexpr;
  const char *yesstr;
  const char *nostr;
  const char *codeset;
  const wchar_t *wyesexpr;
  const wchar_t *wnoexpr;
  const wchar_t *wyesstr;
  const wchar_t *wnostr;
};

/* 387 */
struct _uc_fpxreg
{
  __uint16_t significand[4];
  __uint16_t exponent;
  __uint16_t padding[3];
};

/* 388 */
struct _uc_xmmreg
{
  __uint32_t element[4];
};

/* 389 */
struct _fpstate
{
  __uint16_t cwd;
  __uint16_t swd;
  __uint16_t ftw;
  __uint16_t fop;
  __uint64_t rip;
  __uint64_t rdp;
  __uint32_t mxcsr;
  __uint32_t mxcr_mask;
  _uc_fpxreg st[8];
  _uc_xmmreg xmm[16];
  __uint32_t padding[24];
};

/* 390 */
struct __mcontext
{
  __uint64_t p1home;
  __uint64_t p2home;
  __uint64_t p3home;
  __uint64_t p4home;
  __uint64_t p5home;
  __uint64_t p6home;
  __uint32_t ctxflags;
  __uint32_t mxcsr;
  __uint16_t cs;
  __uint16_t ds;
  __uint16_t es;
  __uint16_t fs;
  __uint16_t gs;
  __uint16_t ss;
  __uint32_t eflags;
  __uint64_t dr0;
  __uint64_t dr1;
  __uint64_t dr2;
  __uint64_t dr3;
  __uint64_t dr6;
  __uint64_t dr7;
  __uint64_t rax;
  __uint64_t rcx;
  __uint64_t rdx;
  __uint64_t rbx;
  __uint64_t rsp;
  __uint64_t rbp;
  __uint64_t rsi;
  __uint64_t rdi;
  __uint64_t r8;
  __uint64_t r9;
  __uint64_t r10;
  __uint64_t r11;
  __uint64_t r12;
  __uint64_t r13;
  __uint64_t r14;
  __uint64_t r15;
  __uint64_t rip;
  _fpstate fpregs;
  __uint64_t vregs[52];
  __uint64_t vcx;
  __uint64_t dbc;
  __uint64_t btr;
  __uint64_t bfr;
  __uint64_t etr;
  __uint64_t efr;
  __uint64_t oldmask;
  __uint64_t cr2;
};

/* 391 */
union sigval
{
  int sival_int;
  void *sival_ptr;
};

/* 392 */
typedef sigval sigval_t;

/* 395 */
struct _sigcommune::$626CE7835321241134BD47B6D307DD68::$C81E615376D806F793EDE60562AB71C5
{
  int _si_fd;
  uint32_t _si_flags;
};

/* 394 */
union _sigcommune::$626CE7835321241134BD47B6D307DD68
{
  _sigcommune::$626CE7835321241134BD47B6D307DD68::$C81E615376D806F793EDE60562AB71C5 _anon_0;
  int64_t _si_pipe_unique_id;
  char *_si_str;
};

/* 393 */
struct __unaligned __declspec(align(4)) _sigcommune
{
  __uint32_t _si_code;
  void *_si_read_handle;
  void *_si_write_handle;
  void *_si_process_handle;
  _sigcommune::$626CE7835321241134BD47B6D307DD68 _anon_0;
};

/* 399 */
union siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860::$E12709673D4B6D9A2F22B1DA19730665
{
  sigval_t si_sigval;
  sigval_t si_value;
};

/* 400 */
struct __unaligned __declspec(align(4)) siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860::$7A644CCA6E689D3DB0E46AB934EEB316
{
  timer_t si_tid;
  unsigned int si_overrun;
};

/* 398 */
struct __unaligned __declspec(align(4)) siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860
{
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860::$E12709673D4B6D9A2F22B1DA19730665 _anon_0;
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860::$7A644CCA6E689D3DB0E46AB934EEB316 _anon_1;
};

/* 401 */
struct __unaligned __declspec(align(4)) siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$C58A1D14C6F055846414B44C7DC7CFE1
{
  int si_status;
  clock_t si_utime;
  clock_t si_stime;
};

/* 402 */
struct siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$B85891DB547B30C906C40D16700047BE
{
  __uint32_t __pad2[30];
  void *si_cyg;
};

/* 397 */
union siginfo_t::$566EC16565A4CC8886393F58CC2FC06A
{
  __uint32_t __pad[32];
  _sigcommune _si_commune;
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$2A6E536B73ED701611F3719D72E7F860 _anon_0;
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$C58A1D14C6F055846414B44C7DC7CFE1 _anon_1;
  void *si_addr;
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A::$B85891DB547B30C906C40D16700047BE _anon_2;
};

/* 396 */
struct __unaligned __declspec(align(4)) siginfo_t
{
  int si_signo;
  int si_code;
  pid_t si_pid;
  uid_t si_uid;
  int si_errno;
  siginfo_t::$566EC16565A4CC8886393F58CC2FC06A _anon_0;
};

/* 403 */
typedef void (*_sig_func_ptr)(int);

/* 405 */
union sigaction::$BCF6FFB1E28A2922373E3CCFF9B98D9A
{
  _sig_func_ptr sa_handler;
  void (*sa_sigaction)(int, siginfo_t *, void *);
};

/* 404 */
struct __declspec(align(8)) sigaction
{
  sigaction::$BCF6FFB1E28A2922373E3CCFF9B98D9A _anon_0;
  sigset_t sa_mask;
  int sa_flags;
};

/* 406 */
struct sigaltstack
{
  void *ss_sp;
  int ss_flags;
  size_t ss_size;
};

/* 407 */
typedef sigaltstack stack_t;

/* 408 */
typedef __mcontext mcontext_t;

/* 409 */
struct __ucontext
{
  mcontext_t uc_mcontext;
  __ucontext *uc_link;
  sigset_t uc_sigmask;
  stack_t uc_stack;
  unsigned __int64 uc_flags;
};

/* 410 */
typedef __ucontext ucontext_t;

/* 411 */
struct mntent
{
  char *mnt_fsname;
  char *mnt_dir;
  char *mnt_type;
  char *mnt_opts;
  int mnt_freq;
  int mnt_passno;
};

/* 412 */
typedef void (*LPVOID_THREAD_START_ROUTINE)(void *) volatile;

/* 413 */
struct cygthread
{
  LONG inuse;
  DWORD id;
  HANDLE h;
  HANDLE ev;
  HANDLE thread_sync;
  void *stack_ptr;
  const char *__name;
  LPTHREAD_START_ROUTINE func;
  unsigned int arglen;
  void *arg;
  bool is_freerange;
  HANDLE notify_detached;
};

/* 416 */
struct tls_pathbuf::$ABA301A931B795E4CAB4388FB44405F3::$5747275DA29B4046D2CA0B5BFDF82D0B
{
  uint32_t c_cnt;
  uint32_t w_cnt;
};

/* 415 */
union tls_pathbuf::$ABA301A931B795E4CAB4388FB44405F3
{
  tls_pathbuf::$ABA301A931B795E4CAB4388FB44405F3::$5747275DA29B4046D2CA0B5BFDF82D0B _anon_0;
  uint64_t _counters;
};

/* 414 */
struct tls_pathbuf
{
  tls_pathbuf::$ABA301A931B795E4CAB4388FB44405F3 _anon_0;
  char *c_buf[50];
  WCHAR *w_buf[50];
};

/* 418 */
union unionent::$6C6BCA5C022E5864DE2798829BCF3CF2
{
  char *s_proto;
  char **h_addr_list;
};

/* 417 */
struct unionent
{
  char *name;
  char **list;
  __int16 port_proto_addrtype;
  __int16 h_len;
  unionent::$6C6BCA5C022E5864DE2798829BCF3CF2 _anon_0;
};

/* 420 */
struct _local_storage::$6E3D9B5294F50C3E7565AAEE4FFEEECD
{
  HANDLE sockevt;
  int max_w4;
  LONG *ser_num;
  HANDLE *w4;
};

/* 419 */
struct _local_storage
{
  char pass[128];
  int dl_error;
  char dl_buffer[256];
  mntent mntbuf;
  int iteration;
  unsigned int available_drives;
  char mnt_type[80];
  char mnt_opts[80];
  char mnt_fsname[260];
  char mnt_dir[260];
  _local_storage::$6E3D9B5294F50C3E7565AAEE4FFEEECD select;
  char strerror_buf[26];
  char strerror_r_buf[26];
  char timezone_buf[20];
  char signamebuf[29];
  char *ntoa_buf;
  unionent *hostent_buf;
  unionent *protoent_buf;
  unionent *servent_buf;
  char unknown_thread_name[30];
  int setmode_file;
  int setmode_mode;
  HANDLE cw_timer;
  tls_pathbuf pathbufs;
  char ttybuf[32];
};

/* 421 */
struct struct_waitq
{
  int pid;
  int options;
  int status;
  HANDLE ev;
  void *rusage;
  struct_waitq *next;
  HANDLE thread_ev;
};

/* 422 */
typedef struct_waitq waitq;

/* 423 */
typedef uintptr_t __tlsstack_t;

/* 425 */
union _cygtls::$0172EF8BC3B2185C9D4C852EAB74AC87
{
  _reent local_clib;
  char __dontuse[1888];
};

/* 424 */
struct __declspec(align(8)) _cygtls
{
  _local_storage locals;
  _cygtls::$0172EF8BC3B2185C9D4C852EAB74AC87 _anon_0;
  void (*func)(int, siginfo_t *, void *);
  int saved_errno;
  int sa_flags;
  sigset_t oldmask;
  sigset_t deltamask;
  int *errno_addr;
  sigset_t sigmask;
  sigset_t sigwait_mask;
  stack_t altstack;
  siginfo_t *sigwait_info;
  HANDLE signal_arrived;
  bool will_wait_for_signal;
  __int64 __align;
  ucontext_t context;
  DWORD thread_id;
  siginfo_t infodata;
  pthread *tid;
  cygthread *_ctinfo;
  san *andreas;
  waitq wq;
  int sig;
  unsigned int incyg;
  unsigned int spinning;
  unsigned int stacklock;
  __tlsstack_t *stackptr;
  __tlsstack_t stack[256];
  unsigned int initialized;
};

/* 426 */
struct san
{
  san *_clemente;
  uint64_t _cnt;
  DWORD64 ret;
  DWORD64 frame;
};

/* 427 */
struct _KSYSTEM_TIME
{
  ULONG LowPart;
  LONG High1Time;
  LONG High2Time;
};

/* 428 */
typedef _KSYSTEM_TIME KSYSTEM_TIME;

/* 429 */
struct _KUSER_SHARED_DATA
{
  BYTE Reserved1[8];
  KSYSTEM_TIME InterruptTime;
  BYTE Reserved2[712];
  ULONG DismountCount;
  BYTE Reserved3[208];
  UINT64 InterruptTimeBias;
};

/* 430 */
typedef _KUSER_SHARED_DATA KUSER_SHARED_DATA;

/* 431 */
enum cygwin_getinfo_types : __int32
{
  CW_LOCK_PINFO = 0x0,
  CW_UNLOCK_PINFO = 0x1,
  CW_GETTHREADNAME = 0x2,
  CW_GETPINFO = 0x3,
  CW_SETPINFO = 0x4,
  CW_SETTHREADNAME = 0x5,
  CW_GETVERSIONINFO = 0x6,
  CW_READ_V1_MOUNT_TABLES = 0x7,
  CW_USER_DATA = 0x8,
  CW_PERFILE = 0x9,
  CW_GET_CYGDRIVE_PREFIXES = 0xA,
  CW_GETPINFO_FULL = 0xB,
  CW_INIT_EXCEPTIONS = 0xC,
  CW_GET_CYGDRIVE_INFO = 0xD,
  CW_SET_CYGWIN_REGISTRY_NAME = 0xE,
  CW_GET_CYGWIN_REGISTRY_NAME = 0xF,
  CW_STRACE_TOGGLE = 0x10,
  CW_STRACE_ACTIVE = 0x11,
  CW_CYGWIN_PID_TO_WINPID = 0x12,
  CW_EXTRACT_DOMAIN_AND_USER = 0x13,
  CW_CMDLINE = 0x14,
  CW_CHECK_NTSEC = 0x15,
  CW_GET_ERRNO_FROM_WINERROR = 0x16,
  CW_GET_POSIX_SECURITY_ATTRIBUTE = 0x17,
  CW_GET_SHMLBA = 0x18,
  CW_GET_UID_FROM_SID = 0x19,
  CW_GET_GID_FROM_SID = 0x1A,
  CW_GET_BINMODE = 0x1B,
  CW_HOOK = 0x1C,
  CW_ARGV = 0x1D,
  CW_ENVP = 0x1E,
  CW_DEBUG_SELF = 0x1F,
  CW_SYNC_WINENV = 0x20,
  CW_CYGTLS_PADSIZE = 0x21,
  CW_SET_DOS_FILE_WARNING = 0x22,
  CW_SET_PRIV_KEY = 0x23,
  CW_SETERRNO = 0x24,
  CW_EXIT_PROCESS = 0x25,
  CW_SET_EXTERNAL_TOKEN = 0x26,
  CW_GET_INSTKEY = 0x27,
  CW_INT_SETLOCALE = 0x28,
  CW_CVT_MNT_OPTS = 0x29,
  CW_LST_MNT_OPTS = 0x2A,
  CW_STRERROR = 0x2B,
  CW_CVT_ENV_TO_WINENV = 0x2C,
  CW_ALLOC_DRIVE_MAP = 0x2D,
  CW_MAP_DRIVE_MAP = 0x2E,
  CW_FREE_DRIVE_MAP = 0x2F,
  CW_SETENT = 0x30,
  CW_GETENT = 0x31,
  CW_ENDENT = 0x32,
  CW_GETNSSSEP = 0x33,
  CW_GETPWSID = 0x34,
  CW_GETGRSID = 0x35,
  CW_CYGNAME_FROM_WINNAME = 0x36,
  CW_FIXED_ATEXIT = 0x37,
  CW_GETNSS_PWD_SRC = 0x38,
  CW_GETNSS_GRP_SRC = 0x39,
  CW_EXCEPTION_RECORD_FROM_SIGINFO_T = 0x3A,
  CW_CYGHEAP_PROFTHR_ALL = 0x3B,
  CW_WINPID_TO_CYGWIN_PID = 0x3C,
  CW_MAX_CYGWIN_PID = 0x3D,
};

/* 432 */
struct per_process_0
{
  char *initial_sp;
  uint32_t magic_biscuit;
  uint32_t dll_major;
  uint32_t dll_minor;
  _reent **impure_ptr_ptr;
  void *(*malloc)(size_t);
  void (*free)(void *);
  void *(*realloc)(void *, size_t);
  int *fmode_ptr;
  int (*main)(int, char **, char **);
  void (**ctors)(void);
  void (**dtors)(void);
  void *data_start;
  void *data_end;
  void *bss_start;
  void *bss_end;
  void *(*calloc)(size_t, size_t);
  void (*premain[4])(int, char **, per_process_0 *);
  int32_t run_ctors_p;
  DWORD_PTR unused[7];
  per_process_cxx_malloc *cxx_malloc;
  HMODULE hmodule;
  DWORD api_major;
  DWORD api_minor;
  DWORD_PTR unused2[4];
  int (*posix_memalign)(void **, size_t, size_t);
  void *pseudo_reloc_start;
  void *pseudo_reloc_end;
  void *image_base;
  MTinterface *threadinterface;
  _reent *impure_ptr;
};

/* 433 */
struct MTinterface
{
  int concurrency;
  LONG threadcount;
  callback *pthread_prepare;
  callback *pthread_child;
  callback *pthread_parent;
};

/* 434 */
struct callback
{
  void (*cb)(void);
  callback *next;
};

/* 435 */
struct cygpsid
{
  PSID psid;
};

/* 436 */
struct cyg_ldap;

/* 437 */
enum exit_states : __int32
{
  ES_NOT_EXITING = 0x0,
  ES_EXIT_STARTING = 0x1,
  ES_SIGNAL_EXIT = 0x2,
  ES_PROCESS_LOCKED = 0x3,
  ES_EVENTS_TERMINATE = 0x4,
  ES_SIGNAL = 0x5,
  ES_CLOSEALL = 0x6,
  ES_THREADTERM = 0x7,
  ES_HUP_PGRP = 0x8,
  ES_HUP_SID = 0x9,
  ES_TTY_TERMINATE = 0xA,
  ES_FINAL = 0xB,
};

/* 438 */
enum winsym_t : __int32
{
  WSYM_sysfile = 0x0,
  WSYM_lnk = 0x1,
  WSYM_native = 0x2,
  WSYM_nativestrict = 0x3,
  WSYM_nfs = 0x4,
};

/* 439 */
struct std::__exception_ptr::exception_ptr
{
  void *_M_exception_object;
};

/* 440 */
typedef void *std::nullptr_t;

/* 441 */
struct std::type_info;

/* 442 */
struct std::integral_constant<bool,false>
{
  __int8 gap0[1];
};

/* 443 */
typedef bool std::integral_constant<bool,false>::value_type;

/* 444 */
struct std::integral_constant<bool,true>
{
  __int8 gap0[1];
};

/* 445 */
typedef bool std::integral_constant<bool,true>::value_type;

/* 446 */
typedef unsigned __int16 char16_t;

/* 447 */
typedef unsigned int char32_t;

